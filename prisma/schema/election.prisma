model Election {
  id            String  @id @default(nanoid(8))
  name          String  @default("New Election")
  description   String  @default("Sample Description")
  imageVersion  Int     @default(0)
  resultsPosted Boolean @default(false)

  // Timing
  nominationsStart DateTime?
  nominationsEnd   DateTime?
  start            DateTime?
  end              DateTime?

  // Membership
  membersOnly Boolean @default(false)
  apiKey      String  @default("")
  members     User[]  @relation("ElectionMembers")

  // Candidate
  ronEnabled                  Boolean @default(true)
  candidateDefaultDescription String  @default("")
  candidateMaxDescription     Int     @default(1000)
  candidateMaxUsers           Int     @default(1)

  // Motion
  motionEnabled            Boolean @default(true)
  motionDefaultDescription String  @default("# The Society notes:\n# The Society believes:\n# The Society resolves to:\n")
  motionMaxDescription     Int     @default(1000)
  motionMaxSeconders       Int     @default(1)

  admins  User[]
  roles   Role[]
  voters  Voter[]
  ballots Ballot[]
  motions Motion[]
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @default("New Role")
  seatsToFill Int      @default(1)
  election    Election @relation(fields: [electionID], references: [id], onDelete: Cascade)

  electionID String

  // [RoleResult]
  result Json?

  candidates Candidate[]
}

model Candidate {
  id           String  @id @default(nanoid(8))
  description  String
  imageVersion Int     @default(0)
  isRON        Boolean @default(false)
  role         Role    @relation(fields: [roleID], references: [id], onDelete: Cascade)

  users       User[]
  userInvites User[]          @relation("CandidateUserInvites")
  votes       CandidateVote[]

  roleID Int
}

model Motion {
  id               String       @id @default(nanoid(8))
  name             String       @default("New Motion")
  description      String
  election         Election     @relation(fields: [electionID], references: [id], onDelete: Cascade)
  proposer         User         @relation("MotionProposers", fields: [proposerID], references: [userID], onDelete: Cascade)
  seconders        User[]       @relation("MotionSeconders")
  seconderRequests User[]       @relation("MotionSeconderRequests")
  votes            MotionVote[]

  // [MotionResult]
  result Json?

  electionID String
  proposerID String
}
