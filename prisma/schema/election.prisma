model Election {
  id          Int     @id @default(autoincrement())
  name        String  @default("New Election")
  description String  @default("Sample Description")
  published   Boolean @default(false)

  // Timing
  start          DateTime?
  end            DateTime?
  candidateStart DateTime?
  candidateEnd   DateTime?

  // Membership
  membersOnly Boolean @default(false)
  apiKey      String  @default("")
  members     User[]  @relation("ElectionMembers")

  // Candidate Settings
  candidateDefaultDescription String @default("")
  candidateMaxDescription     Int    @default(1000)
  candidateMaxUsers           Int    @default(1)

  // Motion Settings
  motionEnabled            Boolean @default(true)
  motionDefaultDescription String  @default("# The Society notes:\n# The Society believes:\n# The Society resolves to:\n")
  motionMaxDescription     Int     @default(1000)
  motionMaxSeconders       Int     @default(1)

  // Results Settings
  resultsPublished Boolean @default(false)

  admins     User[]
  roles      Role[]
  voters     Voter[]
  ballots    Ballot[]
  candidates Candidate[]
  motions    Motion[]
}

model Voter {
  user     User     @relation(fields: [userID], references: [userID], onDelete: Cascade)
  election Election @relation(fields: [electionID], references: [id], onDelete: Cascade)
  voted    Boolean  @default(false)

  userID     String
  electionID Int

  // Cannot link with Ballot/Vote due to traceability
  @@unique([userID, electionID])
}

model Ballot {
  id       Int      @id @default(autoincrement())
  election Election @relation(fields: [electionID], references: [id], onDelete: Cascade)

  electionID Int

  votes Vote[]
}

model Vote {
  ballot    Ballot    @relation(fields: [ballotID], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleID], references: [id], onDelete: Cascade)
  candidate Candidate @relation(references: [id], fields: [candidateID], onDelete: Cascade)
  position  Int

  roleID      Int
  ballotID    Int
  candidateID Int

  // Only one vote per role per ballot
  @@unique([ballotID, roleID])
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @default("New Role")
  seatsToFill Int      @default(1)
  election    Election @relation(fields: [electionID], references: [id], onDelete: Cascade)

  electionID Int

  candidates Candidate[]
  votes      Vote[]
}

model Candidate {
  id          Int      @id @default(autoincrement())
  description String
  election    Election @relation(fields: [electionID], references: [id], onDelete: Cascade)
  users       User[]
  roles       Role[]
  votes       Vote[]
  userInvites User[]   @relation("CandidateUserInvites")

  electionID Int
}

model Motion {
  id               Int      @id @default(autoincrement())
  name             String   @default("New Motion")
  description      String
  election         Election @relation(fields: [electionID], references: [id], onDelete: Cascade)
  proposer         User     @relation("MotionProposers", fields: [proposerID], references: [userID], onDelete: Cascade)
  seconders        User[]   @relation("MotionSeconders")
  seconderRequests User[]   @relation("MotionSeconderRequests")

  electionID Int
  proposerID String
}
