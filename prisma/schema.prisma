//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Election {
  id                          String      @id() @default(cuid(2))
  name                        String      @default("New Election")
  description                 String      @default("# Welcome to my election!\n> Please read the rules and guidelines below before proceeding.\n")
  published                   Boolean     @default(false)
  start                       DateTime?
  end                         DateTime?
  signUpEnd                   DateTime?
  membersOnly                 Boolean     @default(false)
  apiKey                      String      @default("")
  members                     User[]      @relation("ElectionMembers")
  candidateDefaultDescription String      @default("")
  candidateMaxDescription     Int         @default(1000)
  candidateMaxUsers           Int         @default(1)
  motionEnabled               Boolean     @default(true)
  motionDefaultDescription    String      @default("# The Society notes:\n# The Society believes:\n# The Society resolves to:\n")
  motionMaxDescription        Int         @default(1000)
  motionMaxSeconders          Int         @default(1)
  resultsPublished            Boolean     @default(false)
  admins                      User[]
  roles                       Role[]
  voters                      Voter[]
  ballots                     Ballot[]
  candidates                  Candidate[]
  motions                     Motion[]
}

model Voter {
  user       User     @relation(fields: [userID], references: [userID], onDelete: Cascade)
  election   Election @relation(fields: [electionID], references: [id], onDelete: Cascade)
  userID     String
  electionID String

  @@unique([userID, electionID])
}

model Ballot {
  id         Int      @id() @default(autoincrement())
  election   Election @relation(fields: [electionID], references: [id], onDelete: Cascade)
  signature  String   @default(cuid(2))
  electionID String
  votes      Vote[]
}

model Vote {
  ballot      Ballot    @relation(fields: [ballotID], references: [id], onDelete: Cascade)
  role        Role      @relation(fields: [roleID], references: [id], onDelete: Cascade)
  candidate   Candidate @relation(references: [id], fields: [candidateID], onDelete: Cascade)
  position    Int
  roleID      Int
  ballotID    Int
  candidateID String

  @@unique([ballotID, roleID])
}

model Role {
  id          Int         @id() @default(autoincrement())
  name        String      @default("New Role")
  seatsToFill Int         @default(1)
  election    Election    @relation(fields: [electionID], references: [id], onDelete: Cascade)
  electionID  String
  candidates  Candidate[]
  votes       Vote[]
}

model Candidate {
  id          String   @id() @default(cuid(2))
  description String
  election    Election @relation(fields: [electionID], references: [id], onDelete: Cascade)
  electionID  String
  users       User[]
  roles       Role[]
  votes       Vote[]
  userInvites User[]   @relation("CandidateUserInvites")
}

model Motion {
  id               Int      @id() @default(autoincrement())
  name             String   @default("New Motion")
  description      String
  election         Election @relation(fields: [electionID], references: [id], onDelete: Cascade)
  proposer         User     @relation("MotionProposers", fields: [proposerID], references: [userID], onDelete: Cascade)
  seconders        User[]   @relation("MotionSeconders")
  seconderRequests User[]   @relation("MotionSeconderRequests")
  electionID       String
  proposerID       String
}

model User {
  userID                 String      @id()
  name                   String
  electionAdmins         Election[]
  electionMembers        Election[]  @relation("ElectionMembers")
  candidates             Candidate[]
  candidateUserInvites   Candidate[] @relation("CandidateUserInvites")
  motionSeconders        Motion[]    @relation("MotionSeconders")
  motionProposers        Motion[]    @relation("MotionProposers")
  motionSeconderRequests Motion[]    @relation("MotionSeconderRequests")
  voters                 Voter[]
}
