/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/": `/`,
  "/candidate/[candidateID]": (params: { candidateID: string | number }) => {
    return `/candidate/${params["candidateID"]}`
  },
  "/candidate/[candidateID]/edit": (params: { candidateID: string | number }) => {
    return `/candidate/${params["candidateID"]}/edit`
  },
  "/candidate/[candidateID]/edit/invite": (params: { candidateID: string | number }) => {
    return `/candidate/${params["candidateID"]}/edit/invite`
  },
  "/election": `/election`,
  "/election/[electionID]": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}`
  },
  "/election/[electionID]/edit": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/edit`
  },
  "/election/[electionID]/edit/members": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/edit/members`
  },
  "/election/[electionID]/edit/roles": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/edit/roles`
  },
  "/election/[electionID]/results": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/results`
  },
  "/election/[electionID]/vote": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/vote`
  },
  "/motion/[motionID]": (params: { motionID: string | number }) => {
    return `/motion/${params["motionID"]}`
  },
  "/motion/[motionID]/edit": (params: { motionID: string | number }) => {
    return `/motion/${params["motionID"]}/edit`
  },
  "/motion/[motionID]/edit/requests": (params: { motionID: string | number }) => {
    return `/motion/${params["motionID"]}/edit/requests`
  },
}

/**
 * SERVERS
 */
const SERVERS = {
  "GET /assets/[...path]": (params: { path: (string | number)[] }) => {
    return `/assets/${params["path"]?.join("/")}`
  },
  "GET /election/[electionID]/results/proof": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/results/proof`
  },
}

/**
 * ACTIONS
 */
const ACTIONS = {
  "acceptInvite /candidate/[candidateID]": (params: { candidateID: string | number }) => {
    return `/candidate/${params["candidateID"]}?/acceptInvite`
  },
  "update /candidate/[candidateID]/edit": (params: { candidateID: string | number }) => {
    return `/candidate/${params["candidateID"]}/edit?/update`
  },
  "leave /candidate/[candidateID]/edit": (params: { candidateID: string | number }) => {
    return `/candidate/${params["candidateID"]}/edit?/leave`
  },
  "invite /candidate/[candidateID]/edit/invite": (params: { candidateID: string | number }) => {
    return `/candidate/${params["candidateID"]}/edit/invite?/invite`
  },
  "uninvite /candidate/[candidateID]/edit/invite": (params: { candidateID: string | number }) => {
    return `/candidate/${params["candidateID"]}/edit/invite?/uninvite`
  },
  "create /election": `/election?/create`,
  "candidateSignup /election/[electionID]": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}?/candidateSignup`
  },
  "createMotion /election/[electionID]": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}?/createMotion`
  },
  "update /election/[electionID]/edit": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/edit?/update`
  },
  "delete /election/[electionID]/edit": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/edit?/delete`
  },
  "updateApiKey /election/[electionID]/edit/members": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/edit/members?/updateApiKey`
  },
  "populateMembers /election/[electionID]/edit/members": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/edit/members?/populateMembers`
  },
  "updateMembers /election/[electionID]/edit/members": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/edit/members?/updateMembers`
  },
  "editRoles /election/[electionID]/edit/roles": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/edit/roles?/editRoles`
  },
  "vote /election/[electionID]/vote": (params: { electionID: string | number }) => {
    return `/election/${params["electionID"]}/vote?/vote`
  },
  "second /motion/[motionID]": (params: { motionID: string | number }) => {
    return `/motion/${params["motionID"]}?/second`
  },
  "edit /motion/[motionID]/edit": (params: { motionID: string | number }) => {
    return `/motion/${params["motionID"]}/edit?/edit`
  },
  "accept /motion/[motionID]/edit/requests": (params: { motionID: string | number }) => {
    return `/motion/${params["motionID"]}/edit/requests?/accept`
  },
  "reject /motion/[motionID]/edit/requests": (params: { motionID: string | number }) => {
    return `/motion/${params["motionID"]}/edit/requests?/reject`
  },
  "default /signin": `/signin`,
  "default /signout": `/signout`,
}

/**
 * LINKS
 */
const LINKS = {}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (sp?: Record<string, ParamValue | ParamValue[]>, prefix: "?" | "&" = "?") => {
  if (sp === undefined) return ""

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  let anchor = ""
  for (const [name, val] of Object.entries(sp)) {
    if (name === "__KIT_ROUTES_ANCHOR__" && val !== undefined) {
      anchor = `#${val}`
      continue
    }
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted || anchor) {
    return `${prefix}${formatted}${anchor}`.replace("?#", "#")
  }
  return ""
}

/**
 * get the current search params
 *
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

/* type helpers for route function */
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

export type Routes = keyof AllTypes extends `${string}/${infer Route}` ? `/${Route}` : keyof AllTypes
export const routes = [
  ...new Set(Object.keys(AllObjs).map((route) => /^\/.*|[^ ]?\/.*$/.exec(route)?.[0] ?? route)),
] as Routes[]

/**
 * To be used like this:
 * ```ts
 * import { route } from './ROUTES'
 *
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if ((AllObjs[key] as any) instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
 * Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
 *
 * Full example:
 * ```ts
 * import type { KIT_ROUTES } from '$lib/ROUTES'
 * import { kitRoutes } from 'vite-plugin-kit-routes'
 *
 * kitRoutes<KIT_ROUTES>({
 *  PAGES: {
 *    // here, key of object will be typed!
 *  }
 * })
 * ```
 */
export type KIT_ROUTES = {
  PAGES: {
    "/": never
    "/candidate/[candidateID]": "candidateID"
    "/candidate/[candidateID]/edit": "candidateID"
    "/candidate/[candidateID]/edit/invite": "candidateID"
    "/election": never
    "/election/[electionID]": "electionID"
    "/election/[electionID]/edit": "electionID"
    "/election/[electionID]/edit/members": "electionID"
    "/election/[electionID]/edit/roles": "electionID"
    "/election/[electionID]/results": "electionID"
    "/election/[electionID]/vote": "electionID"
    "/motion/[motionID]": "motionID"
    "/motion/[motionID]/edit": "motionID"
    "/motion/[motionID]/edit/requests": "motionID"
  }
  SERVERS: { "GET /assets/[...path]": "path"; "GET /election/[electionID]/results/proof": "electionID" }
  ACTIONS: {
    "acceptInvite /candidate/[candidateID]": "candidateID"
    "update /candidate/[candidateID]/edit": "candidateID"
    "leave /candidate/[candidateID]/edit": "candidateID"
    "invite /candidate/[candidateID]/edit/invite": "candidateID"
    "uninvite /candidate/[candidateID]/edit/invite": "candidateID"
    "create /election": never
    "candidateSignup /election/[electionID]": "electionID"
    "createMotion /election/[electionID]": "electionID"
    "update /election/[electionID]/edit": "electionID"
    "delete /election/[electionID]/edit": "electionID"
    "updateApiKey /election/[electionID]/edit/members": "electionID"
    "populateMembers /election/[electionID]/edit/members": "electionID"
    "updateMembers /election/[electionID]/edit/members": "electionID"
    "editRoles /election/[electionID]/edit/roles": "electionID"
    "vote /election/[electionID]/vote": "electionID"
    "second /motion/[motionID]": "motionID"
    "edit /motion/[motionID]/edit": "motionID"
    "accept /motion/[motionID]/edit/requests": "motionID"
    "reject /motion/[motionID]/edit/requests": "motionID"
    "default /signin": never
    "default /signout": never
  }
  LINKS: Record<string, never>
  Params: { candidateID: never; electionID: never; motionID: never; path: never }
}
